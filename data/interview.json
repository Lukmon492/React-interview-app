{
  "questions": [
    {
      "question": "What is React?",
      "options": [
        "A database management system",
        "A programming language",
        "A JavaScript library for building user interfaces",
        "A CSS framework"
      ],
      "correctOption": 2,
      "points": 10
    },
    {
      "question": "What is JSX?",
      "options": [
        "A state management library",
        "A build tool for React",
        "A testing framework",
        "JavaScript XML syntax extension"
      ],
      "correctOption": 3,
      "points": 10
    },
    {
      "question": "Which hook is used for side effects in functional components?",
      "options": ["useReducer", "useEffect", "useContext", "useState"],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "How do you pass data to a child component?",
      "options": [
        "Using context API",
        "Via Redux",
        "Through props",
        "With CSS variables"
      ],
      "correctOption": 2,
      "points": 10
    },
    {
      "question": "What is the virtual DOM?",
      "options": [
        "A browser extension",
        "A server-side rendering technique",
        "A 3D rendering engine",
        "A lightweight copy of the real DOM"
      ],
      "correctOption": 3,
      "points": 10
    },
    {
      "question": "Which method is called after a component renders?",
      "options": [
        "componentWillUnmount",
        "constructor",
        "componentDidMount",
        "shouldComponentUpdate"
      ],
      "correctOption": 2,
      "points": 10
    },
    {
      "question": "What does useState return?",
      "options": [
        "A component instance",
        "The current state value",
        "An array with state and setter function",
        "A promise"
      ],
      "correctOption": 2,
      "points": 10
    },
    {
      "question": "How do you conditionally render in JSX?",
      "options": [
        "Via switch-case",
        "With if-else statements",
        "Using for loops",
        "Using ternary operators or logical &&"
      ],
      "correctOption": 3,
      "points": 10
    },
    {
      "question": "What is the purpose of keys in React lists?",
      "options": [
        "To sort the list automatically",
        "For encryption purposes",
        "To help React identify which items change",
        "To style list items"
      ],
      "correctOption": 2,
      "points": 10
    },
    {
      "question": "Which tool is used to create a new React app?",
      "options": ["react-init", "npm start", "webpack", "create-react-app"],
      "correctOption": 3,
      "points": 10
    },

    {
      "question": "What is the purpose of useCallback?",
      "options": [
        "To handle side effects",
        "To memoize functions",
        "To manage state",
        "To create context"
      ],
      "correctOption": 1,
      "points": 20
    },
    {
      "question": "How does useContext help with prop drilling?",
      "options": [
        "By improving performance",
        "By automatically passing props",
        "By reducing component size",
        "By providing a way to share values globally"
      ],
      "correctOption": 3,
      "points": 20
    },
    {
      "question": "What is the difference between controlled and uncontrolled components?",
      "options": [
        "Uncontrolled components are faster",
        "Controlled components manage form data via state",
        "Uncontrolled components can't use forms",
        "Controlled components use refs"
      ],
      "correctOption": 1,
      "points": 20
    },
    {
      "question": "What is React.memo used for?",
      "options": [
        "To handle routing",
        "To create hooks",
        "To memoize components",
        "To manage state"
      ],
      "correctOption": 2,
      "points": 20
    },
    {
      "question": "How do you optimize performance in React?",
      "options": [
        "Using inline styles exclusively",
        "By writing all code in one component",
        "Using React.memo, useMemo, and useCallback",
        "Avoiding hooks"
      ],
      "correctOption": 2,
      "points": 20
    },
    {
      "question": "What is the purpose of Error Boundaries?",
      "options": [
        "To handle API errors",
        "To prevent rendering",
        "To validate props",
        "To catch JavaScript errors in components"
      ],
      "correctOption": 3,
      "points": 20
    },
    {
      "question": "What is the children prop?",
      "options": [
        "A lifecycle method",
        "A special state for kids",
        "Child components automatically created",
        "Content passed between component tags"
      ],
      "correctOption": 3,
      "points": 20
    },
    {
      "question": "How do you handle forms in React?",
      "options": [
        "Via CSS only",
        "With jQuery",
        "Using controlled components or libraries like Formik",
        "Using template literals"
      ],
      "correctOption": 2,
      "points": 20
    },
    {
      "question": "What is the significance of keys in React?",
      "options": [
        "They determine component hierarchy",
        "They style components differently",
        "They encrypt component data",
        "They help React identify which items have changed"
      ],
      "correctOption": 3,
      "points": 20
    },
    {
      "question": "What is the purpose of useReducer?",
      "options": [
        "To handle side effects",
        "For complex state logic",
        "To create custom hooks",
        "To replace useState always"
      ],
      "correctOption": 1,
      "points": 20
    },

    {
      "question": "How does React Fiber improve rendering?",
      "options": [
        "By compiling to WebAssembly",
        "By removing the virtual DOM",
        "By enabling incremental rendering",
        "By using workers"
      ],
      "correctOption": 2,
      "points": 30
    },
    {
      "question": "What is the difference between useLayoutEffect and useEffect?",
      "options": [
        "useEffect is faster",
        "useLayoutEffect is deprecated",
        "useLayoutEffect fires synchronously after DOM mutations",
        "There is no difference"
      ],
      "correctOption": 2,
      "points": 30
    },
    {
      "question": "How would you implement a custom hook?",
      "options": [
        "Using class methods",
        "By extending React.Component",
        "With HOC only",
        "By creating a function that uses other hooks"
      ],
      "correctOption": 3,
      "points": 30
    },
    {
      "question": "What is React Suspense for?",
      "options": [
        "To manage state",
        "To catch errors",
        "To handle async operations in components",
        "To replace Redux"
      ],
      "correctOption": 2,
      "points": 30
    },
    {
      "question": "How does code splitting work in React?",
      "options": [
        "Via CSS modules",
        "Using React.lazy and Suspense",
        "Through context API",
        "With PropTypes"
      ],
      "correctOption": 1,
      "points": 30
    },
    {
      "question": "What is concurrent rendering in React?",
      "options": [
        "Rendering on multiple threads",
        "Server-side rendering",
        "The ability to interrupt rendering for high priority updates",
        "Automatic code splitting"
      ],
      "correctOption": 2,
      "points": 30
    },
    {
      "question": "How would you optimize a large list rendering?",
      "options": [
        "By rendering all items at once",
        "Using windowing/virtualization",
        "With inline styles",
        "Avoiding keys"
      ],
      "correctOption": 1,
      "points": 30
    },
    {
      "question": "What is the difference between React.memo and useMemo?",
      "options": [
        "useMemo is deprecated",
        "React.memo is for hooks",
        "They are identical",
        "React.memo is for components, useMemo for values"
      ],
      "correctOption": 3,
      "points": 30
    },
    {
      "question": "How does React's reconciliation algorithm work?",
      "options": [
        "Through mutation observers",
        "By comparing CSS styles",
        "By diffing the virtual DOM with previous version",
        "Using Web Workers"
      ],
      "correctOption": 2,
      "points": 30
    },
    {
      "question": "What are React Portals used for?",
      "options": [
        "For network requests",
        "To render children outside DOM hierarchy",
        "As a state management solution",
        "To replace Redux"
      ],
      "correctOption": 1,
      "points": 30
    },

    {
      "question": "What is Tailwind CSS?",
      "options": [
        "A JavaScript library",
        "A utility-first CSS framework",
        "A testing framework",
        "A state management solution"
      ],
      "correctOption": 1,
      "points": 15
    },
    {
      "question": "How do you apply hover styles in Tailwind?",
      "options": [
        "With @hover directive",
        "Using hover: prefix",
        "Via JavaScript",
        "It's not possible"
      ],
      "correctOption": 1,
      "points": 15
    },
    {
      "question": "What does 'md:' prefix indicate in Tailwind?",
      "options": [
        "Module definition",
        "Margin direction",
        "Medium screen breakpoint",
        "Dark mode"
      ],
      "correctOption": 2,
      "points": 15
    },
    {
      "question": "How do you customize Tailwind's default theme?",
      "options": [
        "By editing node_modules",
        "Via tailwind.config.js",
        "Using CSS variables only",
        "With inline styles"
      ],
      "correctOption": 1,
      "points": 15
    },
    {
      "question": "What is the purpose of @apply in Tailwind?",
      "options": [
        "To import components",
        "To handle responsive design",
        "To create animations",
        "To extract utility classes into CSS"
      ],
      "correctOption": 3,
      "points": 15
    },

    {
      "question": "What is lazy loading in React?",
      "options": [
        "A performance anti-pattern",
        "A state management technique",
        "Loading components only when needed",
        "Making components render slowly"
      ],
      "correctOption": 2,
      "points": 20
    },
    {
      "question": "What is the purpose of React's StrictMode?",
      "options": [
        "To make apps faster",
        "To highlight potential problems",
        "To enforce TypeScript",
        "To replace PropTypes"
      ],
      "correctOption": 1,
      "points": 20
    },
    {
      "question": "How do you improve accessibility in React apps?",
      "options": [
        "By avoiding keyboard navigation",
        "Using divs for everything",
        "Using semantic HTML and ARIA attributes",
        "With complex animations"
      ],
      "correctOption": 2,
      "points": 20
    },
    {
      "question": "What is tree shaking in React?",
      "options": [
        "A rendering optimization",
        "A CSS technique",
        "Removing unused code from bundle",
        "A state management pattern"
      ],
      "correctOption": 2,
      "points": 20
    },
    {
      "question": "Why would you use the useMemo hook?",
      "options": [
        "To create refs",
        "To replace useState",
        "To handle side effects",
        "To memoize expensive calculations"
      ],
      "correctOption": 3,
      "points": 20
    }
  ]
}
